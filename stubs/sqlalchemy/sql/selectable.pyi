from typing import Any, Optional

from .base import Immutable, ImmutableColumnCollection, Executable
from .dml import Insert, Delete
from .elements import ClauseElement

class Selectable(ClauseElement): ...
class HasPrefixes: ...
class HasSuffixes: ...

class FromClause(Selectable):
    @property
    def columns(self) -> ImmutableColumnCollection: ...
    @property
    def c(self) -> ImmutableColumnCollection: ...
    def select(self, whereclause: Optional[ClauseElement] = ..., **params: Any) -> Select: ...

class Alias(FromClause): ...

class HasCTE: ...

class TableClause(Immutable, FromClause):
    name: str
    fullname: str
    def __init__(self, name: str, *columns: Any) -> None: ...
    def insert(self, values: Optional[Any] = ..., inline: bool = ..., **kwargs: Any) -> Insert: ...
    def delete(self, whereclause: Optional[ClauseElement] = ..., **kwargs: Any) -> Delete: ...

class SelectBase(HasCTE, Executable, FromClause): ...
class GenerativeSelect(SelectBase): ...
class Select(HasPrefixes, HasSuffixes, GenerativeSelect): ...
