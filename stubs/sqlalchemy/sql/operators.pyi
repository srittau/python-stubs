from typing import Any, Callable, Container, Generic, Iterable, Optional, TypeVar, Union

_T = TypeVar("_T")


class Operators(object):
    def __and__(self, other: Any) -> Any: ...
    def __or__(self, other: Any) -> Any: ...
    def __invert__(self) -> Any: ...
    def op(
        self, opstring: str, precedence: int = ..., is_comparison: bool = ..., return_type: Optional[Any] = ...,
    ) -> Callable[[Any], Any]: ...
    def bool_op(self, opstring: str, precedence: int = ...) -> Callable[[Any], Any]: ...
    def operate(self, op: Callable[..., Any], *other: Any, **kwargs: Any) -> Any: ...
    def reverse_operate(self, op: Callable[..., Any], *other: Any, **kwargs: Any) -> Any: ...


class ColumnOperators(Operators, Generic[_T]):
    def __lt__(self, other: Union[None, _T, ColumnOperators[_T]]) -> Any: ...
    def __le__(self, other: Union[None, _T, ColumnOperators[_T]]) -> Any: ...
    def __eq__(self, other: Union[None, _T, ColumnOperators[_T]]) -> Any: ...  # type: ignore
    def __ne__(self, other: Union[None, _T, ColumnOperators[_T]]) -> Any: ...  # type: ignore
    def is_distinct_from(self, other: Any) -> Any: ...
    def isnot_distinct_from(self, other: Any) -> Any: ...
    def __gt__(self, other: Union[None, _T, ColumnOperators[_T]]) -> Any: ...
    def __ge__(self, other: Union[None, _T, ColumnOperators[_T]]) -> Any: ...
    def __neg__(self) -> Any: ...
    def __getitem__(self, index: int) -> Any: ...
    def __lshift__(self, other: Any) -> Any: ...
    def __rshift__(self, other: Any) -> Any: ...
    def concat(self, other: Union[_T, ColumnOperators[_T]]) -> Any: ...
    def like(self, other: _T, escape: Optional[str] = ...) -> Any: ...
    def ilike(self, other: _T, escape: Optional[str] = ...) -> Any: ...
    def in_(self, other: Union[Container[_T], Iterable[_T]]) -> Any: ...
    def notin_(self, other: Union[Container[_T], Iterable[_T]]) -> Any: ...
    def notlike(self, other: _T, escape: Optional[str] = ...) -> Any: ...
    def notilike(self, other: _T, escape: Optional[str] = ...) -> Any: ...
    def is_(self, other: _T) -> Any: ...
    def isnot(self, other: _T) -> Any: ...
    def startswith(self, other: str, *, autoescape: bool = ..., escape: str = ...) -> Any: ...
    def endswith(self, other: str, *, autoescape: bool = ..., escape: str = ...) -> Any: ...
    def contains(self, other: str, *, autoescape: bool = ..., escape: str = ...) -> Any: ...
    def match(self, other: str, **kwargs: Any) -> Any: ...
    def desc(self) -> Any: ...
    def asc(self) -> Any: ...
    def nullsfirst(self) -> Any: ...
    def nullslast(self) -> Any: ...
    def collate(self, collation: str) -> Any: ...
    def __radd__(self, other: Any) -> Any: ...
    def __rsub__(self, other: Any) -> Any: ...
    def __rmul__(self, other: Any) -> Any: ...
    def __rdiv__(self, other: Any) -> Any: ...
    def __rmod__(self, other: Any) -> Any: ...
    def between(self, cleft: Any, cright: Any, symmetric: bool = ...) -> Any: ...
    def distinct(self) -> Any: ...
    def any_(self) -> Any: ...
    def all_(self) -> Any: ...
    def __add__(self, other: Any) -> Any: ...
    def __sub__(self, other: Any) -> Any: ...
    def __mul__(self, other: Any) -> Any: ...
    def __div__(self, other: Any) -> Any: ...
    def __mod__(self, other: Any) -> Any: ...
    def __truediv__(self, other: Any) -> Any: ...
    def __rtruediv__(self, other: Any) -> Any: ...
