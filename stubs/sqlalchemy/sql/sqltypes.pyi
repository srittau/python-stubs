import enum
from typing import Optional, overload, Type, Generic, TypeVar

from .base import SchemaEventTarget
from .type_api import TypeEngine as TypeEngine, Emulated

_E = TypeVar("_E", bound=enum.Enum)

class _LookupExpressionAdapter(object): ...

class Boolean(TypeEngine): ...
class Date(TypeEngine): ...
class Time(_LookupExpressionAdapter, TypeEngine): ...
class DateTime(TypeEngine):
    timezone: bool
    def __init__(self, timezone: bool = ...) -> None: ...
class DATETIME(DateTime): ...
class Integer(TypeEngine): ...

class Numeric(TypeEngine):
    def __init__(
        self,
        precision: Optional[int] = ...,
        scale: Optional[int] = ...,
        decimal_return_scale: Optional[int] = ...,
        asdecimal: bool = ...,
    ) -> None: ...

class Float(Numeric): ...
class DECIMAL(Numeric): ...
class JSON(TypeEngine): ...

class String(TypeEngine):
    def __init__(self, length: Optional[int] = ...) -> None: ...
class Text(String): ...

class TIMESTAMP(DateTime): ...

class Unicode(String):
    def __init__(self, length: Optional[int] = ...) -> None: ...

class SchemaType(SchemaEventTarget): ...

class Enum(Emulated, String, SchemaType, Generic[_E]):
    @overload
    def __init__(self, enums: Type[_E]) -> None: ...
    @overload
    def __init__(self, *enums: str) -> None: ...
