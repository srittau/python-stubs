from collections.abc import  KeysView
from typing import Any

from ..sql.base import InPlaceGenerative

# FIXME: removed
class ResultProxy:
    def __getattr__(self, __item: str) -> Any: ...  # incomplete

class ResultMetaData:
    def __getattr__(self, __item: str) -> Any: ...  # incomplete

class RMKeyView(KeysView):
    def __getattr__(self, __item: str) -> Any: ...  # incomplete

class SimpleResultMetaData(ResultMetaData):
    def __getattr__(self, __item: str) -> Any: ...  # incomplete

def result_tuple(fields: Any, extra: Any | None = ...) -> Any: ...

class ResultInternal(InPlaceGenerative):
    def __getattr__(self, __item: str) -> Any: ...  # incomplete

class _WithKeys:
    def keys(self) -> Any: ...

class Result(_WithKeys, ResultInternal):
    def __init__(self, cursor_metadata: Any) -> None: ...
    def yield_per(self, num: int) -> Any: ...
    def unique(self, strategy: Any | None = ...) -> Any: ...
    def columns(self, *col_expressions: Any) -> Any: ...
    def scalars(self, index: int = ...) -> ScalarResult: ...
    def mappings(self) -> MappingResult: ...
    def __iter__(self) -> Any: ...
    def __next__(self) -> Any: ...
    def partitions(self, size: int | None = ...) -> Any: ...
    def fetchall(self) -> list[Any]: ...
    def fetchone(self) -> Any | None: ...
    def fetchmany(self, size: int | None = ...) -> list[Any]: ...
    def all(self) -> list[Any]: ...
    def first(self) -> Any: ...
    def one_or_none(self) -> Any: ...
    def scalar_one(self) -> Any: ...
    def scalar_one_or_none(self) -> Any: ...
    def one(self) -> Any: ...
    def scalar(self) -> Any: ...
    def freeze(self) -> FrozenResult: ...
    def merge(self, *others: Any) -> MergedResult: ...

class FilterResult(ResultInternal): ...

class ScalarResult(FilterResult):
    def __getattr__(self, __item: str) -> Any: ...  # incomplete

class MappingResult(_WithKeys, FilterResult):
    def __getattr__(self, __item: str) -> Any: ...  # incomplete

class FrozenResult:
    def __getattr__(self, __item: str) -> Any: ...  # incomplete

class IteratorResult(Result):
    def __getattr__(self, __item: str) -> Any: ...  # incomplete

def null_result() -> IteratorResult: ...

class ChunkedIteratorResult(IteratorResult):
    def __getattr__(self, __item: str) -> Any: ...  # incomplete

class MergedResult(IteratorResult):
    def __getattr__(self, __item: str) -> Any: ...  # incomplete
