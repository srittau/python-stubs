from typing import Any, List, Optional, Generic, TypeVar

_T = TypeVar("_T")

class Query(Generic[_T]):
    def all(self) -> List[_T]: ...
    def scalar(self) -> Any: ...
    def count(self) -> int: ...
    def delete(self, synchronize_session: str = ...) -> int: ...
    def first(self) -> Optional[_T]: ...
    def filter(self, *criterion: Any) -> Query[_T]: ...
    def filter_by(self, **kwargs: Any) -> Query[_T]: ...
    def order_by(self, *criterion: Any) -> Query[_T]: ...
    def group_by(self, *criterion: Any) -> Query[_T]: ...
    def join(self, *props: Any) -> Query[_T]: ...
    def limit(self, limit: int) -> Query[_T]: ...
    def subquery(self, name: Optional[str] = ..., with_labels: bool = ..., reduce_columns: bool = ...) -> Any: ...
    def outerjoin(self, *props: Any, aliased: bool = ..., from_joinpoint: bool = ..., full: bool = ...) -> Query[_T]: ...
    def options(self, *args: Any) -> Query[_T]: ...
