from typing import Union, overload, Any, Protocol

class _BytesWritable(Protocol):
    def write(self, s: bytes) -> Any: ...
class _StrWritable(Protocol):
    def write(self, s: str) -> Any: ...

class Stream:
    @overload
    def render(self, method: Union[None, str, type] = ..., encoding: None = ..., out: None = ..., **kwargs: Any) -> str: ...
    @overload
    def render(self, method: Union[None, str, type], encoding: None, out: _StrWritable, **kwargs: Any) -> None: ...
    @overload
    def render(self, method: Union[None, str, type], *, out: _StrWritable, **kwargs: Any) -> None: ...
    @overload
    def render(self, method: Union[None, str, type], encoding: str, out: None = ..., **kwargs: Any) -> bytearray: ...
    @overload
    def render(self, method: Union[None, str, type], encoding: None, out: _BytesWritable, **kwargs: Any) -> None: ...
    @overload
    def render(self, method: Union[None, str, type], *, out: _BytesWritable, **kwargs: Any) -> None: ...
