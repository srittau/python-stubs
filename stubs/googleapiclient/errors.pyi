from typing import Any, Optional


class Error(Exception): ...
class HttpError(Error):
    resp: Any
    content: bytes
    url: str
    error_details: str
    def __init__(self, resp: Any, content: bytes, *, uri: Optional[str] = ...) -> None: ...
class InvalidJsonError(Error): ...
class UnknownFileType(Error): ...
class UnknownLinkType(Error): ...
class UnknownApiNameOrVersion(Error): ...
class UnacceptableMimeTypeError(Error): ...
class MediaUploadSizeError(Error): ...
class ResumableUploadError(HttpError): ...
class InvalidChunkSizeError(Error): ...
class InvalidNotificationError(Error): ...
class BatchError(HttpError):
    def __init__(self, reason: str, *, resp: Optional[Any] = ..., content: Optional[bytes] = ...) -> None: ...
class UnexpectedMethodError(Error):
    def __init__(self, *, methodId: Optional[str] = ...) -> None: ...
class UnexpectedBodyError(Error):
    def __init__(self, expected: str, provided: str) -> None: ...
