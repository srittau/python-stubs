from abc import abstractmethod, ABCMeta
from typing import Any, Union

from ..ifc import PasswordHash

def validate_secret(secret: Union[str, bytes]) -> None: ...

class MinimalHandler(PasswordHash): ...

class GenericHandler(MinimalHandler):
    @classmethod
    def from_string(cls, hash: Union[str, bytes], **context: Any) -> GenericHandler: ...
    @abstractmethod
    def to_string(self) -> str: ...
    @classmethod
    def hash(cls, secret: Union[str, bytes], **kwds: Any) -> str: ...
    @classmethod
    def verify(cls, secret: Union[str, bytes], hash: Union[str, bytes], **context: Any) -> bool: ...

class HasRounds(GenericHandler, metaclass=ABCMeta): ...

class HasSalt(GenericHandler, metaclass=ABCMeta): ...

class HasRawSalt(HasSalt, metaclass=ABCMeta): ...

class HasRawChecksum(GenericHandler, metaclass=ABCMeta): ...
